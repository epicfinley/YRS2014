{"changed":true,"filter":false,"title":"Gmaps.php","tooltip":"/test code/Gmaps.php","value":"<?php\n/**\n * GMaps class ver 0.2\n * \n * Gets geo-informations from the Google Maps API\n * http://code.google.com/apis/maps/index.html\n *\n * Copyright 2008-2009 by Enrico Zimuel (enrico@zimuel.it)\n * \n */\nclass GMaps\n{\n    const MAPS_HOST = 'maps.google.com';\n    /**\n     * Latitude \n     * \n     * @var double\n     */\n    private $_latitude;\n    /**\n     * Longitude \n     *\n     * @var double\n     */\n    private $_longitude;\n    /**\n     * Address \n     *\n     * @var string\n     */\n    private $_address;\n    /**\n     * Country name \n     *\n     * @var string\n     */\n    private $_countryName;\n    /**\n     * Country name code\n     *\n     * @var string\n     */\n    private $_countryNameCode;\n    /**\n     * Administrative area name\n     *\n     * @var string\n     */\n    private $_administrativeAreaName;\n    /**\n     * Postal Code\n     *\n     * @var string\n     */\n    private $_postalCode;\n    /**\n     * Google Maps Key\n     *\n     * @var string\n     */\n    private $_key;\n    /**\n     * Base Url\n     *\n     * @var string\n     */\n    private $_baseUrl;\n    /**\n     * Construct\n     *\n     * @param string $key\n     */\n    function __construct ($key='')\n    {\n        $this->_key= $key;\n        $this->_baseUrl= \"http://\" . self::MAPS_HOST . \"/maps/geo?output=xml&key=\" . $this->_key;\n    }\n    /**\n     * getInfoLocation\n     *\n     * @param string $address\n     * @param string $city\n     * @param string $state\n     * @return boolean\n     */\n    public function getInfoLocation ($address) {\n        if (!empty($address)) {\n            return $this->_connect($address);\n        }\n        return false;    \n    }\n    /**\n     * connect to Google Maps\n     *\n     * @param string $param\n     * @return boolean\n     */\n    private function _connect($param) {\n        $request_url = $this->_baseUrl . \"&oe=utf-8&q=\" . urlencode($param);\n        $xml = simplexml_load_file($request_url);      \n        if (! empty($xml->Response)) {\n            $point= $xml->Response->Placemark->Point;\n            if (! empty($point)) {\n                $coordinatesSplit = explode(\",\", $point->coordinates);\n                // Format: Longitude, Latitude, Altitude\n                $this->_latitude = $coordinatesSplit[1];\n                $this->_longitude = $coordinatesSplit[0];    \n            }\n            $this->_address= $xml->Response->Placemark->address;\n            $this->_countryName= $xml->Response->Placemark->AddressDetails->Country->CountryName;\n            $this->_countryNameCode= $xml->Response->Placemark->AddressDetails->Country->CountryNameCode;\n            $this->_administrativeAreaName= $xml->Response->Placemark->AddressDetails->Country->AdministrativeArea->AdministrativeAreaName;\n            $administrativeArea= $xml->Response->Placemark->AddressDetails->Country->AdministrativeArea;\n            if (!empty($administrativeArea->SubAdministrativeArea)) {\n                $this->_postalCode= $administrativeArea->SubAdministrativeArea->Locality->PostalCode->PostalCodeNumber;\n            } elseif (!empty($administrativeArea->Locality)) {\n                $this->_postalCode= $administrativeArea->Locality->PostalCode->PostalCodeNumber;\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * get the Postal Code\n     *\n     * @return string\n     */\n    public function getPostalCode () {\n        return $this->_postalCode;\n    }\n\t/**\n     * get the Address\n     *\n     * @return string\n     */\n    public function getAddress () {\n        return $this->_address;\n    }\n\t/**\n     * get the Country name\n     *\n     * @return string\n     */\n    public function getCountryName () {\n        return $this->_countryName;\n    }\n\t/**\n     * get the Country name code\n     *\n     * @return string\n     */\n    public function getCountryNameCode () {\n        return $this->_countryNameCode;\n    }\n\t/**\n     * get the Administrative area name\n     *\n     * @return string\n     */\n    public function getAdministrativeAreaName () {\n        return $this->_administrativeAreaName;\n    }\n    /**\n     * get the Latitude coordinate\n     *\n     * @return double\n     */\n    public function getLatitude () {\n        return $this->_latitude;\n    }\n    /**\n     * get the Longitude coordinate\n     *\n     * @return double\n     */\n    public function getLongitude () {\n        return $this->_longitude;\n    }\n}?>","undoManager":{"mark":1,"position":3,"stack":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":2}},"text":"?>"},{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":2,"column":0}},"nl":"\n","lines":["<?php",""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":5}},"text":"<?php"},{"action":"insertText","range":{"start":{"row":0,"column":5},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":179,"column":0}},"lines":["/**"," * GMaps class ver 0.2"," * "," * Gets geo-informations from the Google Maps API"," * http://code.google.com/apis/maps/index.html"," *"," * Copyright 2008-2009 by Enrico Zimuel (enrico@zimuel.it)"," * "," */","class GMaps","{","    const MAPS_HOST = 'maps.google.com';","    /**","     * Latitude ","     * ","     * @var double","     */","    private $_latitude;","    /**","     * Longitude ","     *","     * @var double","     */","    private $_longitude;","    /**","     * Address ","     *","     * @var string","     */","    private $_address;","    /**","     * Country name ","     *","     * @var string","     */","    private $_countryName;","    /**","     * Country name code","     *","     * @var string","     */","    private $_countryNameCode;","    /**","     * Administrative area name","     *","     * @var string","     */","    private $_administrativeAreaName;","    /**","     * Postal Code","     *","     * @var string","     */","    private $_postalCode;","    /**","     * Google Maps Key","     *","     * @var string","     */","    private $_key;","    /**","     * Base Url","     *","     * @var string","     */","    private $_baseUrl;","    /**","     * Construct","     *","     * @param string $key","     */","    function __construct ($key='')","    {","        $this->_key= $key;","        $this->_baseUrl= \"http://\" . self::MAPS_HOST . \"/maps/geo?output=xml&key=\" . $this->_key;","    }","    /**","     * getInfoLocation","     *","     * @param string $address","     * @param string $city","     * @param string $state","     * @return boolean","     */","    public function getInfoLocation ($address) {","        if (!empty($address)) {","            return $this->_connect($address);","        }","        return false;    ","    }","    /**","     * connect to Google Maps","     *","     * @param string $param","     * @return boolean","     */","    private function _connect($param) {","        $request_url = $this->_baseUrl . \"&oe=utf-8&q=\" . urlencode($param);","        $xml = simplexml_load_file($request_url);      ","        if (! empty($xml->Response)) {","            $point= $xml->Response->Placemark->Point;","            if (! empty($point)) {","                $coordinatesSplit = explode(\",\", $point->coordinates);","                // Format: Longitude, Latitude, Altitude","                $this->_latitude = $coordinatesSplit[1];","                $this->_longitude = $coordinatesSplit[0];    ","            }","            $this->_address= $xml->Response->Placemark->address;","            $this->_countryName= $xml->Response->Placemark->AddressDetails->Country->CountryName;","            $this->_countryNameCode= $xml->Response->Placemark->AddressDetails->Country->CountryNameCode;","            $this->_administrativeAreaName= $xml->Response->Placemark->AddressDetails->Country->AdministrativeArea->AdministrativeAreaName;","            $administrativeArea= $xml->Response->Placemark->AddressDetails->Country->AdministrativeArea;","            if (!empty($administrativeArea->SubAdministrativeArea)) {","                $this->_postalCode= $administrativeArea->SubAdministrativeArea->Locality->PostalCode->PostalCodeNumber;","            } elseif (!empty($administrativeArea->Locality)) {","                $this->_postalCode= $administrativeArea->Locality->PostalCode->PostalCodeNumber;","            }","            return true;","        } else {","            return false;","        }","    }","    /**","     * get the Postal Code","     *","     * @return string","     */","    public function getPostalCode () {","        return $this->_postalCode;","    }","\t/**","     * get the Address","     *","     * @return string","     */","    public function getAddress () {","        return $this->_address;","    }","\t/**","     * get the Country name","     *","     * @return string","     */","    public function getCountryName () {","        return $this->_countryName;","    }","\t/**","     * get the Country name code","     *","     * @return string","     */","    public function getCountryNameCode () {","        return $this->_countryNameCode;","    }","\t/**","     * get the Administrative area name","     *","     * @return string","     */","    public function getAdministrativeAreaName () {","        return $this->_administrativeAreaName;","    }","    /**","     * get the Latitude coordinate","     *","     * @return double","     */","    public function getLatitude () {","        return $this->_latitude;","    }","    /**","     * get the Longitude coordinate","     *","     * @return double","     */","    public function getLongitude () {","        return $this->_longitude;","    }"]},{"action":"insertText","range":{"start":{"row":179,"column":0},"end":{"row":179,"column":1}},"text":"}"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":179,"column":1},"end":{"row":179,"column":2}},"text":"?"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":179,"column":2},"end":{"row":179,"column":3}},"text":">"}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":179,"column":3},"end":{"row":179,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1406707137360}